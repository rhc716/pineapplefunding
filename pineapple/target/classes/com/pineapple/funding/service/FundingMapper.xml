<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.pineapple.funding.service.FundingMapper">
	<!-- 펀딩 개설 요청 쿼리 -->
	<insert id="insertFunding" parameterType="com.pineapple.funding.service.Funding">
		INSERT INTO funding
			(fdCode, fdComCode, fdTitle, minInvestMoney, numberOfShares,
	 		issuePrice, openDate, closeDate, minInterestRate, fdType,
	  		fdStatus, projectStartDate, projectEndDate, posterImgName,
	  		 posterImgExtension, posterImgWidth, posterImgHeight, posterImgSize,
			 fdPublisher, adminApproval, fdApprovalDate, fdApprovalId, fdDate)
			
		VALUES (NULL, #{fdComCode}, #{fdTitle}, #{minInvestMoney}, #{numberOfShares},
		 		#{issuePrice}, #{openDate}, #{closeDate}, #{minInterestRate}, #{fdType},
  				'개설요청',#{projectStartDate}, #{projectEndDate}, #{posterImgName},
 				#{posterImgExtension}, #{posterImgWidth}, #{posterImgHeight}, #{posterImgSize},
				#{fdPublisher}, 0, NULL, NULL, NOW())
		
		<!-- insert 후 parameterType에 보드객체에 autoincrement된 보드넘버를 넣어주세요 -->
        <selectKey keyProperty="fdCode" resultType="int" order="AFTER"> <!-- pk가 아닐땐, 키컬럼도 넣어 설정할 수 있음 -->
            select last_insert_id() as fdCode
        </selectKey>
	</insert>
	
	<!-- (기업회원) 내가 소속된 회사의 펀딩 리스트 가져오기 -->
	<select id="selectMyFundingList" resultType="java.util.HashMap" parameterType="String">
		SELECT *
		FROM funding
		WHERE fdComCode = ANY 
		(SELECT e.emComCode 
		FROM user u INNER JOIN employee e 
		ON u.userId = e.emUserId
		WHERE u.userId = #{userId})
	</select>
	
	
	<!-- (기업회원) 펀딩삭제 -->
	<delete id="deleteFunding" parameterType="Int">
		DELETE FROM funding 
		WHERE fdCode= #{delfdCode}
	</delete>

	<!-- (기업회원) 펀딩수정 -->
	<update id="updateFunding" parameterType="java.util.HashMap">
		UPDATE funding
		SET
			fdTitle=#{funding.fdTitle},
			minInvestMoney=#{funding.minInvestMoney},
			numberOfShares=#{funding.numberOfShares},
			issuePrice=#{funding.issuePrice},
			openDate=#{funding.openDate},
			closeDate=#{funding.closeDate},
			minInterestRate=#{funding.minInterestRate},
			fdType=#{funding.fdType},
			projectStartDate=#{funding.projectStartDate},
			projectEndDate=#{funding.projectEndDate}
		WHERE fdCode=#{fdCode}
	</update>
	
	<!-- (기업회원) 내가 소속된 회사의 펀딩, 펀딩 상세를 담은 리스트 가져오기 -->
	<select id="selectFundingDetailList" resultType="java.util.HashMap" parameterType="String">
		SELECT *
		FROM 	(
				SELECT *
				FROM funding
				WHERE fdComCode = ANY 
				(SELECT e.emComCode 
				FROM user u INNER JOIN employee e 
				ON u.userId = e.emUserId
				WHERE u.userId = #{userId})
				
				) j LEFT JOIN fundingdetail d
		ON j.fdCode = d.fdDetailCode
	</select>
	
	<!-- (기업회원) 펀딩상세정보 수정 -->
	<update id="updateFundingDetail" parameterType="com.pineapple.funding.service.FundingDetail">
		UPDATE fundingdetail
		SET
			openstory=#{openstory},
			comValue=#{comValue}
		WHERE fdDetailCode=#{fdDetailCode}
	</update>
	
	<!-- 펀딩상세 입력 트렌젝션처리 -->
	<insert id="insertFundingDetail" parameterType="int">
		INSERT INTO fundingdetail
			(fdDetailCode)
		VALUES (#{pk})
	</insert>
	
	<!-- 펀딩상세 삭제 트렌젝션처리 -->
	<delete id="deleteFundingDetail" parameterType="int">
		DELETE FROM fundingdetail 
		WHERE fdDetailCode=#{delfdCode}
	</delete>
	
	<!-- 마일스톤 입력을 위한 조회 (회사코드,펀딩코드,펀딩명) // 개설요청 중인 것  -->
	<select id="selectForInsertMileStone" parameterType="String" resultType="java.util.HashMap">
		SELECT *
		FROM funding
		WHERE fdComCode = ANY 
		(SELECT e.emComCode 
		FROM user u INNER JOIN employee e 
		ON u.userId = e.emUserId
		WHERE u.userId = #{userId})
		AND fdStatus = '개설요청';
	</select>
	
	<!-- 마일스톤입력 -->
	<insert id="insertMileStone" parameterType="com.pineapple.funding.service.MileStone">
		INSERT INTO milestone
			(milestoneCode, msFdCode, milestoneStep, milestoneName, milestoneSummary, msComCode, pm)
		VALUES (NULL, #{msFdCode}, #{milestoneStep}, #{milestoneName}, #{milestoneSummary}, #{msComCode}, #{pm})
	</insert>
	
	<!-- 마일스톤입력을 위한 사원조회 -->
	<select id="selectemployeeforinsertmilestone" parameterType="int" resultType="java.util.HashMap">
		SELECT *
		FROM employee e
		WHERE e.emUserId = ANY
		(SELECT authReceiver as emUserId
		FROM fundingauth a
		WHERE a.authFdCode = #{fdCode}
		AND fdAuthLevelCode = '1')
	</select>
	
</mapper>

 