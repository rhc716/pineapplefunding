<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.pineapple.funding.service.FundingMapper">
<!-- 각각의 권한별로 pmsmain에서 보여줄 정보들을 담는 객체 -->
	<!-- 관리자 -->
	<resultMap type="com.pineapple.funding.service.InfomationForPmsMainViewOfAdminUser" 
	id="InfomationForPmsMainViewOfAdminUser">
		<result property="totalUserCount" column="totalUserCount"/>
		<result property="totalComCount" column="totalComCount"/>
		<result property="totalInvestorUserCount" column="totalInvestorUserCount"/>
		<result property="totalComUserCount" column="totalComUserCount"/>
		<result property="totalVisitCount" column="totalComUserCount"/>
		<result property="todayVisitCount" column="todayVisitCount"/>
		<result property="totalFundingCount" column="totalFundingCount"/>
		<result property="totalRecruitingFundingCount" column="totalRecruitingFundingCount"/>
		<result property="totalProceedingFundingCount" column="totalProceedingFundingCount"/>
		<result property="totalCommissionRevenue" column="totalCommissionRevenue"/>
		<result property="todayCommissionRevenue" column="todayCommissionRevenue"/>
	</resultMap>
	<!-- 기업회원 -->
	<!-- <resultMap type="com.pineapple.funding.service.InfomationForPmsMainViewOfCompanyUser" 
	id="InfomationForPmsMainViewOfCompanyUser">
		<collection property="comNameList" javaType="ArrayList" ofType="String">
            <id `></id>
            <result property="comName" column="comName"/>
        </collection>
		<collection property="FdList" javaType="ArrayList" ofType="com.pineapple.funding.service.Funding">
			<result property="fdTitle" column="fdTitle"/>
			<result property="fdStatus" column="fdStatus"/>
			<result property="fdCode" column="fdCode"/>
		</collection>
		<result property="fdTotalCount" column="fdTotalCount"/>
		<result property="fdRecruitingCount" column="fdRecruitingCount"/>
		<result property="fdProceedingCount" column="fdProceedingCount"/>
	</resultMap> -->
	<!-- <resultMap type="com.pineapple.funding.service.InfomationForPmsMainViewOfInvestorUser" 
	id="InfomationForPmsMainViewOfInvestorUser">
	
	
	</resultMap> -->
	
	
	
	
	<!-- 펀딩 개설 요청 쿼리 -->
	<insert id="insertFunding" parameterType="com.pineapple.funding.service.Funding">
		INSERT INTO funding
			(fdCode, fdComCode, fdTitle, minInvestMoney, numberOfShares,
	 		issuePrice, openDate, closeDate, minInterestRate, fdType,
	  		fdStatus, projectStartDate, projectEndDate, posterImg,
	  		 fdPublisher, adminApproval, fdApprovalDate, fdApprovalId, fdDate)
			
		VALUES (NULL, #{fdComCode}, #{fdTitle}, #{minInvestMoney}, #{numberOfShares},
		 		#{issuePrice}, #{openDate}, #{closeDate}, #{minInterestRate}, #{fdType},
  				'개설요청',#{projectStartDate}, #{projectEndDate}, #{posterImg},
  					#{fdPublisher}, 0, NULL, NULL, NOW())
		
		<!-- insert 후 parameterType에 보드객체에 autoincrement된 보드넘버를 넣어주세요 -->
        <selectKey keyProperty="fdCode" resultType="int" order="AFTER"> <!-- pk가 아닐땐, 키컬럼도 넣어 설정할 수 있음 -->
            select last_insert_id() as fdCode
        </selectKey>
	</insert>
	
	<!-- 펀딩코드로 펀딩하나 가져오기 -->
	<select id="selectMyFunding" parameterType="int" resultType="com.pineapple.funding.service.Funding">
		SELECT *
		FROM funding
		WHERE fdCode = #{fdCode}
	</select>
	
	<!-- (기업회원) 내가 소속된 회사의 펀딩 리스트 가져오기 -->
	<select id="selectMyFundingList" resultType="java.util.HashMap" parameterType="String">
		SELECT *
			FROM funding
			WHERE fdComCode = ANY 
				(SELECT e.emComCode 
				FROM user u INNER JOIN employee e 
				ON u.userId = e.emUserId
				WHERE u.userId = #{userId})
		ORDER BY fdStatus
	</select>
	
	
	<!-- (기업회원) 펀딩삭제 -->
	<delete id="deleteFunding" parameterType="Int">
		DELETE FROM funding 
		WHERE fdCode= #{delfdCode}
	</delete>

	<!-- (기업회원) 펀딩수정 -->
	<update id="updateFunding" parameterType="java.util.HashMap">
		UPDATE funding
		SET
			fdTitle=#{funding.fdTitle},
			minInvestMoney=#{funding.minInvestMoney},
			numberOfShares=#{funding.numberOfShares},
			issuePrice=#{funding.issuePrice},
			openDate=#{funding.openDate},
			closeDate=#{funding.closeDate},
			minInterestRate=#{funding.minInterestRate},
			fdType=#{funding.fdType},
			projectStartDate=#{funding.projectStartDate},
			projectEndDate=#{funding.projectEndDate}
		WHERE fdCode=#{fdCode}
	</update>
	
	<!-- (기업회원) 내가 소속된 회사의 펀딩, 펀딩 상세를 담은 리스트 가져오기 -->
	<select id="selectFundingDetailList" resultType="java.util.HashMap" parameterType="String">
		SELECT *
		FROM 	(
				SELECT *
				FROM funding
				WHERE fdComCode = ANY 
				(SELECT e.emComCode 
				FROM user u INNER JOIN employee e 
				ON u.userId = e.emUserId
				WHERE u.userId = #{userId})
				
				) j LEFT JOIN fundingdetail d
		ON j.fdCode = d.fdDetailCode
	</select>
	
	<!-- (기업회원) 펀딩상세정보 수정 -->
	<update id="updateFundingDetail" parameterType="com.pineapple.funding.service.FundingDetail">
		UPDATE fundingdetail
		SET
			openstory=#{openstory},
			comValue=#{comValue}
		WHERE fdDetailCode=#{fdDetailCode}
	</update>
	
	<!-- 펀딩상세 입력 트렌젝션처리 -->
	<insert id="insertFundingDetail" parameterType="int">
		INSERT INTO fundingdetail
			(fdDetailCode)
		VALUES (#{pk})
	</insert>
	
	<!-- 펀딩상세 삭제 트렌젝션처리 -->
	<delete id="deleteFundingDetail" parameterType="int">
		DELETE FROM fundingdetail 
		WHERE fdDetailCode=#{delfdCode}
	</delete>
	
	<!-- 마일스톤 입력을 위한 조회 (회사코드,펀딩코드,펀딩명) // 개설요청 중인 것  -->
	<select id="selectForInsertMileStone" parameterType="String" resultType="java.util.HashMap">
		SELECT *
			FROM funding
			WHERE fdComCode = ANY 
				(SELECT e.emComCode 
				FROM user u INNER JOIN employee e 
				ON u.userId = e.emUserId
				WHERE u.userId = #{userId})
		AND fdStatus = '개설요청';
	</select>
	
	<!-- 마일스톤입력 -->
	<insert id="insertMileStone" parameterType="com.pineapple.funding.service.MileStone">
		INSERT INTO milestone
			(milestoneCode, msFdCode, milestoneStep, milestoneName, milestoneSummary, msComCode, pm)
		VALUES (NULL, #{msFdCode}, #{milestoneStep}, #{milestoneName}, #{milestoneSummary}, #{msComCode}, #{pm})
	</insert>
	
	<!-- 마일스톤입력을 위한 사원조회 -->
	<select id="selectemployeeforinsertmilestone" parameterType="int" resultType="java.util.HashMap">
		SELECT *
			FROM employee e
			WHERE e.emUserId = ANY
				(SELECT authReceiver as emUserId
				FROM fundingauth a
				WHERE a.authFdCode = #{fdCode}
		AND fdAuthLevelCode = '1')
	</select>
	
	<!-- 마일스톤입력을 위한 사원조회 -->
	<select id="selectMyMileStoneList" parameterType="String" resultType="java.util.HashMap">
		SELECT *
		FROM milestone m INNER JOIN funding f
		ON m.msFdCode = f.fdCode
		WHERE m.msFdCode =  ANY
			(SELECT fdCode
			FROM funding
			WHERE fdComCode = ANY 
				(SELECT e.emComCode 
				FROM user u INNER JOIN employee e 
				ON u.userId = e.emUserId
				WHERE u.userId = #{userId}))
		ORDER BY fdCode
	</select>
	
	<!-- 마일스톤 수정  -->
	<update id="updateMileStone" parameterType="com.pineapple.funding.service.MileStone">
		UPDATE milestone
		SET
			milestoneStep=#{milestoneStep},
			milestoneName=#{milestoneName},
			milestoneSummary=#{milestoneSummary},
			pm=#{pm}
		WHERE milestoneCode=#{milestoneCode}
	</update>
	
	<!-- 마일스톤 삭제  -->
	<delete id="deleteMileStone" parameterType="int">
		DELETE FROM milestone 
		WHERE milestoneCode=#{delMsCode}
	</delete>
	
	<!-- 펀딩 보고서 업로드정보 저장 -->
	<insert id="insertFundingFile" parameterType="com.pineapple.funding.service.FundingAndFdFile">
		INSERT INTO fundingfile
			(fileFdCode, fdFileName, fdFileUploadName, fdFileExtension, fdFileSize)
		VALUES (#{fileFdCode}, #{fdFileName}, #{fdFileUploadName}, #{fdFileExtension}, #{fdFileSize})
	</insert>
	
	<!-- 내가 소속된 회사의 모든 펀딩파일 리스트 불러오기 -->
	<select id="selectFundingFileList" parameterType="String" resultType="java.util.HashMap">
		SELECT *
		FROM funding f INNER JOIN
			(SELECT *
			FROM fundingfile 
			WHERE fileFdCode = ANY(
							SELECT fdCode
							FROM funding
							WHERE fdComCode = ANY 
							(SELECT e.emComCode 
							FROM user u INNER JOIN employee e 
							ON u.userId = e.emUserId
							WHERE u.userId = #{userId})
							)
			ORDER BY fileFdCode) l
		WHERE f.fdCode = l.fileFdCode
	</select>
	
	<!-- 펀딩파일 삭제 -->
	<delete id="deleteFundingFile" parameterType="int">
		DELETE FROM fundingfile 
		WHERE fdFileCode=#{fdFileCode}
	</delete>
	
	<!-- 펀딩배당계획 입력 -->
	<insert id="insertDividendPlan">
		INSERT INTO dividendplan
			(divFdCode, divIndexName, settlementUnit, minMargin, maxMargin, dividendRate)
		VALUES (#{divFdCode}, #{divIndexName}, #{settlementUnit}, #{minMargin}, #{maxMargin}, #{dividendRate})
	</insert>
	
	
	<!-- 펀딩배당계획 조회, 펀딩정보와 같이 불러옴 -->
	<select id="selectFundingDividendPalnList" parameterType="int" resultType="java.util.HashMap">
		SELECT *
		FROM dividendplan d INNER JOIN funding f
		ON d.divFdCode = f.fdCode
		WHERE d.divFdCode = #{fdCode}
	</select>
	
	<!-- 펀딩배당계획 삭제 -->
	<delete id="deleteFundingDividendPaln" parameterType="int">
		DELETE FROM dividendplan 
		WHERE divCode=#{divCode}
	</delete>
	
	<!-- 펀딩별 투자자 리스트 불러오기 -->
	<select id="selectFundingInvestorList" parameterType="int" resultType="java.util.HashMap">
		SELECT *
		FROM investment
		WHERE investFdCode=#{fdCode}
	</select>
	
	<!-- 펀딩생성에서 사용할 회사정보 가져오기 -->
	<select id="selectComList" parameterType="String" resultType="java.util.HashMap">
		SELECT *
		FROM company
		WHERE comCode = ANY
					(SELECT e.emComCode 
						FROM user u INNER JOIN employee e 
						ON u.userId = e.emUserId
						WHERE u.userId = #{userId})
	</select>
	
	<!-- 펀딩 포스터이미지 수정 -->
	<update id="updateFundingImage" parameterType="java.util.Map">
		UPDATE funding
		SET
		posterImg=#{posterImg}
		WHERE fdCode = #{fdCode}
	</update>
	
	
	<!-- 펀딩 insert ( 펀딩명 중복검사 ) -->
	<select id="fdtitleCheck" parameterType="String" resultType="com.pineapple.funding.service.Funding">
		SELECT * 
		FROM funding
		WHERE fdTitle = #{fdTitle}
	</select>
</mapper>

 