<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.pineapple.funding.service.FundingMapper">
	<!-- 각각의 권한별로 pmsmain에서 보여줄 정보들을 담는 객체 -->
	<!-- 관리자 -->
	<resultMap type="com.pineapple.funding.service.InfomationForPmsMainViewOfAdminUser" 
	id="InfomationForPmsMainViewOfAdminUser">
		<result property="totalUserCount" column="totalUserCount"/>
		<result property="totalComCount" column="totalComCount"/>
		<result property="totalInvestorUserCount" column="totalInvestorUserCount"/>
		<result property="totalComUserCount" column="totalComUserCount"/>
		<result property="totalVisitCount" column="totalVisitCount"/>
		<result property="todayVisitCount" column="todayVisitCount"/>
		<result property="totalFundingCount" column="totalFundingCount"/>
		<result property="totalRequestFundingCount" column="totalRequestFundingCount"/>
		<result property="totalRecruitingFundingCount" column="totalRecruitingFundingCount"/>
		<result property="totalProceedingFundingCount" column="totalProceedingFundingCount"/>
		<result property="totalCommissionRevenue" column="totalCommissionRevenue"/>
		<result property="todayCommissionRevenue" column="todayCommissionRevenue"/>
	</resultMap>
	
	<!-- 기업회원 -->
	<resultMap type="com.pineapple.funding.service.InfomationForPmsMainViewOfCompanyUser" 
	id="InfomationForPmsMainViewOfCompanyUser">	
		<result property="fdTotalCount" column="fdTotalCount"/>
		<result property="fdRecruitingCount" column="fdRecruitingCount"/>
		<result property="fdProceedingCount" column="fdProceedingCount"/>
		<collection property="comList" ofType="com.pineapple.user.service.CompanyAndRank">
        	<result property="comCode" column="comCode"/>
        	<result property="comName" column="comName"/>
        	<result property="rankName" column="rankName"/>
        	<result property="emDepartment" column="emDepartment"/> 
        </collection>
		<collection property="FundingAndFdAuthList" ofType="com.pineapple.funding.service.FundingAndFdAuth">
			<result property="fdCode" column="fdCode"/>
			<result property="fdComCode" column="fdComCode"/>
			<result property="emComName" column="emComName"/>
			<result property="fdTitle" column="fdTitle"/>
			<result property="fdStatus" column="fdStatus"/>
			<result property="authLevelName" column="authLevelName"/>
		</collection>
	</resultMap>
	<!-- 투자자회원 -->
	<resultMap type="com.pineapple.funding.service.InfomationForPmsMainViewOfInvestorUser" 
	id="InfomationForPmsMainViewOfInvestorUser">
		<result property="totalInvestMoney" column="totalInvestMoney"/>
		<result property="totalDevidendMoney" column="totalDevidendMoney"/>
		<result property="totalInvestmentCount" column="totalInvestmentCount"/>
		<result property="proceedingInvestmentCount" column="proceedingInvestmentCount"/>
		<result property="proceedingFdInvestMoney" column="proceedingFdInvestMoney"/>
		<result property="proceedingFdDevidendMoney" column="proceedingFdDevidendMoney"/>
		<collection property="fdList" ofType="com.pineapple.funding.service.FundingAndInvestment">
			<id property="fdCode" column="fdCode"/>
			<result property="fdComCode" column="fdComCode"/>
			<result property="fdTitle" column="fdTitle"/>
			<result property="minInvestMoney" column="minInvestMoney"/>
			<result property="numberOfShares" column="numberOfShares"/>
			<result property="issuePrice" column="issuePrice"/>
			<result property="openDate" column="openDate"/>
			<result property="closeDate" column="closeDate"/>
			<result property="minInterestRate" column="minInterestRate"/>
			<result property="fdType" column="fdType"/>
			<result property="fdStatus" column="fdStatus"/>
			<result property="projectStartDate" column="projectStartDate"/>
			<result property="projectEndDate" column="projectEndDate"/>
			<result property="posterImg" column="posterImg"/>
			<result property="fdPublisher" column="fdPublisher"/>
			<result property="adminApproval" column="adminApproval"/>
			<result property="fdApprovalDate" column="fdApprovalDate"/>
			<result property="fdApprovalId" column="fdApprovalId"/>
			<result property="fdDate" column="fdDate"/>
			<result property="investCode" column="investCode"/>
			<result property="investFdCode" column="investFdCode"/>
			<result property="investId" column="investId"/>
			<result property="purchaseShares" column="purchaseShares"/>
			<result property="investTime" column="investTime"/>
			<result property="payCheck" column="payCheck"/>
		</collection>
	</resultMap>
	<resultMap type="com.pineapple.funding.service.FundingAndCompanyAndMileStone" id="FundingAndCompanyAndMileStone">
		<result property="fdCode" column="fdCode"/>
		<result property="fdComCode" column="fdComCode"/>
		<result property="fdTitle" column="fdTitle"/>
		<result property="minInvestMoney" column="minInvestMoney"/>
		<result property="numberOfShares" column="numberOfShares"/>
		<result property="issuePrice" column="issuePrice"/>
		<result property="openDate" column="openDate"/>
		<result property="closeDate" column="closeDate"/>
		<result property="minInterestRate" column="minInterestRate"/>
		<result property="fdType" column="fdType"/>
		<result property="fdStatus" column="fdStatus"/>
		<result property="projectStartDate" column="projectStartDate"/>
		<result property="projectEndDate" column="projectEndDate"/>
		<result property="posterImg" column="posterImg"/>
		<result property="fdPublisher" column="fdPublisher"/>
		<result property="adminApproval" column="adminApproval"/>
		<result property="fdApprovalDate" column="fdApprovalDate"/>
		<result property="fdApprovalId" column="fdApprovalId"/>
		<result property="fdDate" column="fdDate"/>
		<result property="comCode" column="comCode"/>
		<result property="comName" column="comName"/>
		<collection property="mileStoneList" ofType="com.pineapple.funding.service.MileStone">
			<id property="milestoneCode" column="milestoneCode"/>
			<result property="msFdCode" column="msFdCode"/>
			<result property="milestoneStep" column="milestoneStep"/>
			<result property="milestoneName" column="milestoneName"/>
			<result property="milestoneSummary" column="milestoneSummary"/>
			<result property="msComCode" column="msComCode"/>
			<result property="pm" column="pm"/>
		</collection>
	</resultMap>
	
	
	
	
	<!-- 펀딩 개설 요청 쿼리 -->
	<insert id="insertFunding" parameterType="com.pineapple.funding.service.Funding">
		INSERT INTO funding
			(fdCode, fdComCode, fdTitle, minInvestMoney, numberOfShares,
	 		issuePrice, openDate, closeDate, minInterestRate, fdType,
	  		fdStatus, projectStartDate, projectEndDate, posterImg,
	  		 fdPublisher, adminApproval, fdApprovalDate, fdApprovalId, fdDate)
			
		VALUES (NULL, #{fdComCode}, #{fdTitle}, #{minInvestMoney}, #{numberOfShares},
		 		#{issuePrice}, #{openDate}, #{closeDate}, #{minInterestRate}, #{fdType},
  				'개설요청',#{projectStartDate}, #{projectEndDate}, #{posterImg},
  					#{fdPublisher}, 0, NULL, NULL, NOW())
		
		<!-- insert 후 parameterType에 보드객체에 autoincrement된 보드넘버를 넣어주세요 -->
        <selectKey keyProperty="fdCode" resultType="int" order="AFTER"> <!-- pk가 아닐땐, 키컬럼도 넣어 설정할 수 있음 -->
            select last_insert_id() as fdCode
        </selectKey>
	</insert>
	
	<!-- 펀딩코드로 펀딩하나 가져오기 -->
	<select id="selectMyFunding" parameterType="int" resultType="com.pineapple.funding.service.Funding">
		SELECT *
		FROM funding
		WHERE fdCode = #{fdCode}
	</select>
	
	<!-- (기업회원) 내가 소속된 회사의 펀딩 리스트 가져오기 -->
	<select id="selectMyFundingList" resultType="java.util.HashMap" parameterType="String">
		SELECT *
			FROM funding
			WHERE fdComCode = ANY 
				(SELECT e.emComCode 
				FROM user u INNER JOIN employee e 
				ON u.userId = e.emUserId
				WHERE u.userId = #{userId})
		ORDER BY fdStatus
	</select>
	
	
	<!-- (기업회원) 펀딩삭제 -->
	<delete id="deleteFunding" parameterType="Int">
		DELETE FROM funding 
		WHERE fdCode= #{delfdCode}
	</delete>

	<!-- (기업회원) 펀딩수정 -->
	<update id="updateFunding" parameterType="java.util.HashMap">
		UPDATE funding
		SET
			fdTitle=#{funding.fdTitle},
			minInvestMoney=#{funding.minInvestMoney},
			numberOfShares=#{funding.numberOfShares},
			issuePrice=#{funding.issuePrice},
			openDate=#{funding.openDate},
			closeDate=#{funding.closeDate},
			minInterestRate=#{funding.minInterestRate},
			fdType=#{funding.fdType},
			projectStartDate=#{funding.projectStartDate},
			projectEndDate=#{funding.projectEndDate}
		WHERE fdCode=#{fdCode}
	</update>
	
	<!-- (기업회원) 내가 소속된 회사의 펀딩, 펀딩 상세를 담은 리스트 가져오기 -->
	<select id="selectFundingDetailList" resultType="java.util.HashMap" parameterType="String">
		SELECT *
		FROM 	(
				SELECT *
				FROM funding
				WHERE fdComCode = ANY 
				(SELECT e.emComCode 
				FROM user u INNER JOIN employee e 
				ON u.userId = e.emUserId
				WHERE u.userId = #{userId})
				
				) j LEFT JOIN fundingdetail d
		ON j.fdCode = d.fdDetailCode
	</select>
	
	<!-- (기업회원) 펀딩상세정보 수정 -->
	<update id="updateFundingDetail" parameterType="com.pineapple.funding.service.FundingDetail">
		UPDATE fundingdetail
		SET
			openstory=#{openstory},
			comValue=#{comValue}
		WHERE fdDetailCode=#{fdDetailCode}
	</update>
	
	<!-- 펀딩상세 입력 트렌젝션처리 -->
	<insert id="insertFundingDetail" parameterType="int">
		INSERT INTO fundingdetail
			(fdDetailCode)
		VALUES (#{pk})
	</insert>
	
	<!-- 펀딩상세 삭제 트렌젝션처리 -->
	<delete id="deleteFundingDetail" parameterType="int">
		DELETE FROM fundingdetail 
		WHERE fdDetailCode=#{delfdCode}
	</delete>
	
	<!-- 마일스톤 입력을 위한 조회 (회사코드,펀딩코드,펀딩명) // 개설요청 중인 것  -->
	<select id="selectForInsertMileStone" parameterType="String" resultType="java.util.HashMap">
		SELECT *
			FROM funding
			WHERE fdComCode = ANY 
				(SELECT e.emComCode 
				FROM user u INNER JOIN employee e 
				ON u.userId = e.emUserId
				WHERE u.userId = #{userId})
		AND fdStatus = '개설요청';
	</select>
	
	<!-- 마일스톤입력 -->
	<insert id="insertMileStone" parameterType="com.pineapple.funding.service.MileStone">
		INSERT INTO milestone
			(milestoneCode, msFdCode, milestoneStep, milestoneName, milestoneSummary, msComCode, pm)
		VALUES (NULL, #{msFdCode}, #{milestoneStep}, #{milestoneName}, #{milestoneSummary}, #{msComCode}, #{pm})
	</insert>
	
	<!-- 마일스톤입력을 위한 사원조회 -->
	<select id="selectemployeeforinsertmilestone" parameterType="int" resultType="java.util.HashMap">
		SELECT *
			FROM employee e
			WHERE e.emUserId = ANY
				(SELECT authReceiver as emUserId
				FROM fundingauth a
				WHERE a.authFdCode = #{fdCode}
		AND fdAuthLevelCode = '1')
	</select>
	
	<!-- 마일스톤입력을 위한 사원조회 -->
	<select id="selectMyMileStoneList" parameterType="String" resultType="java.util.HashMap">
		SELECT *
		FROM milestone m INNER JOIN funding f
		ON m.msFdCode = f.fdCode
		WHERE m.msFdCode =  ANY
			(SELECT fdCode
			FROM funding
			WHERE fdComCode = ANY 
				(SELECT e.emComCode 
				FROM user u INNER JOIN employee e 
				ON u.userId = e.emUserId
				WHERE u.userId = #{userId}))
		ORDER BY fdCode
	</select>
	
	<!-- 마일스톤 수정  -->
	<update id="updateMileStone" parameterType="com.pineapple.funding.service.MileStone">
		UPDATE milestone
		SET
			milestoneStep=#{milestoneStep},
			milestoneName=#{milestoneName},
			milestoneSummary=#{milestoneSummary},
			pm=#{pm}
		WHERE milestoneCode=#{milestoneCode}
	</update>
	
	<!-- 마일스톤 삭제  -->
	<delete id="deleteMileStone" parameterType="int">
		DELETE FROM milestone 
		WHERE milestoneCode=#{delMsCode}
	</delete>
	
	<!-- 펀딩 보고서 업로드정보 저장 -->
	<insert id="insertFundingFile" parameterType="com.pineapple.funding.service.FundingAndFdFile">
		INSERT INTO fundingfile
			(fileFdCode, fdFileName, fdFileUploadName, fdFileExtension, fdFileSize)
		VALUES (#{fileFdCode}, #{fdFileName}, #{fdFileUploadName}, #{fdFileExtension}, #{fdFileSize})
	</insert>
	
	<!-- 내가 소속된 회사의 모든 펀딩파일 리스트 불러오기 -->
	<select id="selectFundingFileList" parameterType="String" resultType="java.util.HashMap">
		SELECT *
		FROM funding f INNER JOIN
			(SELECT *
			FROM fundingfile 
			WHERE fileFdCode = ANY(
							SELECT fdCode
							FROM funding
							WHERE fdComCode = ANY 
							(SELECT e.emComCode 
							FROM user u INNER JOIN employee e 
							ON u.userId = e.emUserId
							WHERE u.userId = #{userId})
							)
			ORDER BY fileFdCode) l
		WHERE f.fdCode = l.fileFdCode
	</select>
	
	<!-- 펀딩에 속해있는 펀딩파일 리스트 불러오기 -->
	<select id="selectFundingFileListOfFunding" parameterType="int" resultType="java.util.HashMap">
		SELECT *
		FROM fundingfile
		WHERE fileFdCode = #{fdCode}
	</select>
	
	<!-- 펀딩파일 삭제 -->
	<delete id="deleteFundingFile" parameterType="int">
		DELETE FROM fundingfile 
		WHERE fdFileCode=#{fdFileCode}
	</delete>
	
	<!-- 펀딩배당계획 입력 -->
	<insert id="insertDividendPlan">
		INSERT INTO dividendplan
			(divFdCode, divIndexName, settlementUnit, minMargin, maxMargin, dividendRate)
		VALUES (#{divFdCode}, #{divIndexName}, #{settlementUnit}, #{minMargin}, #{maxMargin}, #{dividendRate})
	</insert>
	
	
	<!-- 펀딩배당계획 조회, 펀딩정보와 같이 불러옴 -->
	<select id="selectFundingDividendPalnList" parameterType="int" resultType="java.util.HashMap">
		SELECT *
		FROM dividendplan d INNER JOIN funding f
		ON d.divFdCode = f.fdCode
		WHERE d.divFdCode = #{fdCode}
	</select>
	
	<!-- 펀딩배당계획 삭제 -->
	<delete id="deleteFundingDividendPaln" parameterType="int">
		DELETE FROM dividendplan 
		WHERE divCode=#{divCode}
	</delete>
	
	<!-- 펀딩별 투자자 리스트 불러오기 -->
	<select id="selectFundingInvestorList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT *
		FROM investment
		WHERE investFdCode=#{fdCode}
		<if test="_parameter.numberOfRequests==null">
			limit 0,5;
		</if>
		<if test="_parameter.numberOfRequests!=null">
			limit #{numberOfRequests},5;
		</if>
	</select>
	
	<!-- 펀딩생성에서 사용할 회사정보 가져오기 -->
	<select id="selectComList" parameterType="String" resultType="java.util.HashMap">
		SELECT *
		FROM company
		WHERE comCode = ANY
					(SELECT e.emComCode 
						FROM user u INNER JOIN employee e 
						ON u.userId = e.emUserId
						WHERE u.userId = #{userId})
	</select>
	
	<!-- 펀딩 포스터이미지 수정 -->
	<update id="updateFundingImage" parameterType="java.util.Map">
		UPDATE funding
		SET
		posterImg=#{posterImg}
		WHERE fdCode = #{fdCode}
	</update>
	
	
	<!-- 펀딩 insert ( 펀딩명 중복검사 ) -->
	<select id="fdtitleCheck" parameterType="String" resultType="com.pineapple.funding.service.Funding">
		SELECT * 
		FROM funding
		WHERE fdTitle = #{fdTitle}
	</select>
	
	<!-- pmsmain.jsp 에서 권한별로 필요한 정보의 리스트를 가져옴 -->
	<!-- 관리자 첫번째 -->
	<select id="selectProjectInfoListAdminFirst" resultMap="InfomationForPmsMainViewOfAdminUser">
		<!-- 총회원수 총기업회원수 총투자자회원수 총회사수를 가져옴 -->
		SELECT u.totalUserCount, u.totalComUserCount, u.totalInvestorUserCount, count(c.comCode) totalComCount
		FROM
		(SELECT COUNT(*) totalUserCount
		, COUNT(case when levelCode ='2' then 1 end) totalComUserCount
		, COUNT(case when levelCode ='3' then 1 end) totalInvestorUserCount
		FROM user) u INNER JOIN company c
	</select>
	<!-- 관리자 두번째 -->
	<select id="selectProjectInfoListAdminSecond" resultMap="InfomationForPmsMainViewOfAdminUser">
		<!-- 총 펀딩수, 모집중인 펀딩수, 개설요청중인 펀딩수, 진행중인 펀딩수를 가져옴 -->
		SELECT 
		COUNT(*) totalFundingCount
		, COUNT(CASE when fdStatus="모집중" OR fdStatus="결제모집중"  then 1 end) totalRecruitingFundingCount
		, COUNT(CASE when fdStatus="개설요청" then 1 end) totalRequestFundingCount
		, COUNT(CASE when fdStatus="진행중" then 1 end) totalProceedingFundingCount
		FROM funding
	</select>
	<!-- 관리자 세번째 -->
	<select id="selectProjectInfoListAdminThird" resultType="java.util.HashMap" parameterType="int">
		<!-- 마감, 모집실패로 끝난 펀딩을 제외한 모든 펀딩 목록 10개를 가져옴 -->
		SELECT  f.fdCode,
				f.fdTitle,
				f.numberOfShares,
				c.comName,
				IFNULL(sum(i.purchaseShares),0) as total,
				f.posterImg,
				f.minInvestMoney,
				f.issuePrice,
				f.fdStatus,
				TO_DAYS(f.closeDate)-TO_DAYS(now()) as days
		FROM funding f 
		LEFT JOIN company c 
		ON f.fdComCode = c.comCode 
		LEFT JOIN investment i 
		ON f.fdCode = i.investFdCode 
		WHERE f.fdStatus != '마감' OR f.fdStatus != '모집실패'
		GROUP BY f.fdCode 
		ORDER BY f.fdDate DESC
		<choose>
		<when test="_parameter != null">
			limit #{numberOfRequests},10;
		</when>
		<otherwise>
			limit 0,10;
		</otherwise>
		</choose>
	</select>
	<!-- 관리자 네번째 -->
	<select id="selectProjectInfoListAdminfourth" resultMap="InfomationForPmsMainViewOfAdminUser">
		<!-- 수수료 발생 총액, 수수료 당일 발생금액 가져옴 -->
		SELECT SUM(mfAmount) totalCommissionRevenue, SUM(CASE when DATE(mfDate) = curdate() then mfAmount end)todayCommissionRevenue
			FROM moneyflow
		WHERE mfCategory = '4';
	</select>
	<!-- 기업회원 첫번째 -->
	<select id="selectProjectInfoListComUserFirst" resultMap="InfomationForPmsMainViewOfCompanyUser" parameterType="String">
		<!-- 자신이 속한 회사의 총 펀딩수, 모집중인 펀딩수, 진행중인 펀딩수를 가져옴 -->
		SELECT 
			COUNT(*) fdTotalCount
			, COUNT(CASE WHEN fdStatus = '모집중' OR fdStatus = '결제모집중' then 1 end) fdRecruitingCount
			, COUNT(CASE WHEN fdStatus = '진행중' then 1 end) fdProceedingCount
		FROM
			(SELECT *
			FROM employee e INNER JOIN company c
			ON e.emComCode = c.comCode
			WHERE e.emUserId = #{userId}) g INNER JOIN funding f
		ON g.emComCode = f.fdComCode
	</select>
	<!-- 기업회원 두번째 -->
	<select id="selectProjectInfoListComUserSecond" resultMap="InfomationForPmsMainViewOfCompanyUser" parameterType="String">
		<!-- 소속회사와 직급명 리스트를 가져옴 -->
		SELECT e.emComCode, e.emDepartment, c.comName, r.rankName
		FROM employee e INNER JOIN company c INNER JOIN rankcode r
		ON e.emComCode = c.comCode AND e.emRankCode = r.rankCode
		WHERE e.emUserId = #{userId}
	</select>
	<!-- 기업회원 세번째 -->
	<select id="selectProjectInfoListComUserThird" resultMap="InfomationForPmsMainViewOfCompanyUser" parameterType="String">
		<!-- 펀딩상태가 모집중 or 결제모집중 or 진행중 펀딩과 펀딩내 권한을 세트로 가져옴 -->
		SELECT bb.emComName, bb.fdCode, bb.fdTitle, bb.fdStatus, fal.authLevelName
		FROM
			(SELECT *
			FROM
				(SELECT  *
				FROM
					(SELECT *
					FROM employee e INNER JOIN company c
					ON e.emComCode = c.comCode
					WHERE e.emUserId = #{userId}) g INNER JOIN funding f
				ON g.emComCode = f.fdComCode
				WHERE fdStatus = '모집중' OR fdStatus = '결제모집중' OR fdStatus = '진행중') aa LEFT JOIN fundingauth fa
			ON aa.emUserId = fa.authReceiver) bb LEFT JOIN fundingauthlevel fal
		ON bb.fdAuthLevelCode = fal.authLevelCode
	</select>
	<!-- 투자자 첫번째 -->
	<select id="selectProjectInfoListInvestorFirst" resultMap="InfomationForPmsMainViewOfInvestorUser" parameterType="String">
		<!-- 투자한 펀딩리스트중 모집,결제모집, 진행중인 펀딩리스트와 투자정보를 가져옴 -->
		SELECT *
		FROM funding f INNER JOIN investment i
		ON f.fdCode = i.investFdCode AND i.investId = #{userId}
		WHERE f.fdStatus = '모집중' OR f.fdStatus = '결제모집중' OR f.fdStatus = '진행중'
	</select>
	<!-- 투자자 두번째 -->
	<select id="selectProjectInfoListInvestorSecond" resultMap="InfomationForPmsMainViewOfInvestorUser" parameterType="String">
		<!-- 투자한 투자총액, 총투자건수, 진행중인 투자수, 진행중인 펀딩의 투자금액을 가져옴 -->
		SELECT
		SUM(i.purchaseShares*f.issuePrice) totalInvestMoney
		,COUNT(*) totalInvestmentCount
		,COUNT(CASE when f.fdStatus = '진행중' then 1 end ) proceedingInvestmentCount
		,SUM(CASE when f.fdStatus = '진행중' then i.purchaseShares*f.issuePrice end) proceedingFdInvestMoney
		FROM investment i INNER JOIN funding f
		ON i.investFdCode = f.fdCode
		WHERE i.investId = #{userId}
	</select>
	<select id="selectProjectInfoListInvestorThird" resultMap="InfomationForPmsMainViewOfInvestorUser" parameterType="String">
		<!-- 배당총액, 진행중인 펀딩의 현재까지 배당금액총액 가져옴 -->
		SELECT SUM(d.divPayAmount) totalDevidendMoney, SUM(CASE when f.fdStatus = '진행중' then d.divPayAmount end) proceedingFdDevidendMoney
		FROM dividendpay d INNER JOIN investment i INNER JOIN funding f
		WHERE d.divPayInvestCode = i.investCode AND i.investFdCode = f.fdCode AND i.investId = #{userId}
	</select>
	
	<!-- 스케줄러용 <펀딩상태변화> //설명은 Scheduler클래스에// 모집중 -> 결제모집중 -->
	<update id="fundingUpdateScheduleOne" parameterType="String">
		<![CDATA[ 
		UPDATE funding
		SET fdStatus='결제모집중'
		WHERE fdCode=
		ANY (SELECT fdCode 
			  FROM(SELECT p.fdCode
					 FROM
						(SELECT f.fdCode, f.numberOfShares n, SUM(i.purchaseShares) s
						 FROM funding f INNER JOIN investment i
						 ON f.fdCode = i.investFdCode
					    WHERE f.fdStatus = '모집중'
						 GROUP BY f.fdCode) p
						 WHERE p.n <= p.s
					)tmp)
		AND closeDate < #{getTime}
		]]> 
	</update>
	<!-- 스케줄러용 <펀딩상태변화> //설명은 Scheduler클래스에// 결제모집중 -> 진행중 -->
	<update id="fundingUpdateScheduleTwo" parameterType="String">
		<![CDATA[ 
		UPDATE funding
		SET fdStatus='진행중'
		WHERE fdCode=
		ANY (SELECT fdCode 
			  FROM(SELECT p.fdCode
					 FROM
						(SELECT f.fdCode, f.numberOfShares n, SUM(i.purchaseShares) s
						 FROM funding f INNER JOIN investment i
						 ON f.fdCode = i.investFdCode
					    WHERE f.fdStatus = '결제모집중'
					    AND i.payCheck = '1'
						 GROUP BY f.fdCode) p
						 WHERE p.n <= p.s
					)tmp)
		AND projectStartDate <= #{getTime}
		]]> 
	</update>
	
	<!-- 스케줄러용 <펀딩상태변화> //설명은 Scheduler클래스에// 진행중 -> 마감 -->
	<update id="fundingUpdateScheduleThree" parameterType="String">
		<![CDATA[ 
		UPDATE funding
		SET fdStatus='마감'
		WHERE fdCode=
		ANY (SELECT fdCode 
			  FROM(SELECT fdCode
					 FROM funding
				  	 WHERE fdStatus = '진행중')tmp)
		AND projectEndDate < #{getTime}
		]]>
	</update>
	
	<!-- 스케줄러용 <펀딩상태변화> //설명은 Scheduler클래스에// 모집중 -> 모집실패 -->
	<update id="fundingUpdateScheduleFour" parameterType="String">
		<![CDATA[ 
		UPDATE funding
		SET fdStatus='모집실패'
		WHERE fdCode=
		ANY (SELECT fdCode 
			  FROM(SELECT p.fdCode
					 FROM
						(SELECT f.fdCode, f.numberOfShares n, SUM(i.purchaseShares) s
						 FROM funding f INNER JOIN investment i
						 ON f.fdCode = i.investFdCode
					    WHERE f.fdStatus = '모집중'
						 GROUP BY f.fdCode) p
						 WHERE p.n > p.s
					)tmp)
		AND closeDate < #{getTime}
		]]> 
	</update>
	
	<!-- 스케줄러용 <펀딩상태변화> //설명은 Scheduler클래스에// 결제모집중 -> 모집실패 -->
	<update id="fundingUpdateScheduleFive" parameterType="String">
		<![CDATA[ 
		UPDATE funding
		SET fdStatus='모집실패'
		WHERE fdCode=
		ANY (SELECT fdCode 
			  FROM(SELECT p.fdCode
					 FROM
						(SELECT f.fdCode, f.numberOfShares n, SUM(i.purchaseShares) s
						 FROM funding f INNER JOIN investment i
						 ON f.fdCode = i.investFdCode
					    WHERE f.fdStatus = '결제모집중'
					    AND i.payCheck = '1'
						 GROUP BY f.fdCode) p
						 WHERE p.n > p.s
					)tmp)
		AND projectStartDate <= #{getTime}
		]]> 
	</update>
	
	
	<!-- 펀딩코드에 따른 마일스톤 리스트 가져오기 -->
	<select id="selectMilestoneListOfFunding" parameterType="int" resultType="com.pineapple.funding.service.MileStone">
		SELECT *
		FROM milestone
		WHERE msFdCode = #{fdCode}
	</select>
	
	<!-- 마일스톤단계 중복검사를 위해 select -->
	<select id="milestoneStepCheck" parameterType="java.util.HashMap" resultType="com.pineapple.funding.service.MileStone">
		SELECT *
		FROM milestone
		WHERE msFdCode = #{msFdCode} 
		AND milestoneStep = #{milestoneStep}
	</select>
	
	<!-- 펀딩코드에 해당되는 회사정보와 펀딩정보 마일스톤 리스트를 가져옴 -->
	<select id="selectForfundingTotalViewPageOne" resultMap="FundingAndCompanyAndMileStone" parameterType="int">
		SELECT *
		FROM
			(SELECT *
			FROM funding f INNER JOIN company c
			WHERE f.fdCode = #{fdCode} AND f.fdComCode = c.comCode) fac LEFT JOIN milestone m 
		ON fac.fdCode = m.msFdCode
	</select>
	
	<!-- 관리자 프로젝트관리의 펀딩보기에서 마감, 모집실패로 끝난 펀딩리스트를 불러옴 -->
	<select id="selectEndFundingList" resultType="com.pineapple.funding.service.Funding" parameterType="int">
		<!-- 마감, 모집실패로 끝난 펀딩을 10개를 가져옴 -->
		SELECT * 
		FROM funding
		WHERE fdStatus = '마감' OR fdStatus = '모집실패'
		ORDER BY fdDate DESC
		<choose>
		<when test="_parameter != null">
			limit #{numberOfRequests},10;
		</when>
		<otherwise>
			limit 0,10;
		</otherwise>
		</choose>
	</select>
</mapper>

 