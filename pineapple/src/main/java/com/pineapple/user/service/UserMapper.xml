<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.pineapple.user.service.UserMapper">
	
	<!-- 회원탈퇴요청 취소(회원탈퇴시간 null 업데이트)  -->
	<update id="updateUserCancleDelTime" parameterType="String">
		UPDATE user
		SET
		uDelTime=null
		WHERE userId=#{userId}
	</update>

	<!-- 회원탈퇴요청(회원탈퇴시간 업데이트) -->
	<update id="updateUserDelTime" parameterType="String">
		UPDATE user
		SET
		uDelTime=NOW()
		WHERE userId=#{userId}
	</update>
	
	<!-- 회원공통정보 입력/수정/조회/삭제 -->
	<insert id="insertUser" parameterType="com.pineapple.user.service.User">
		INSERT INTO user(userId, nickname, name, pw, levelCode)
			VALUES (#{userId}, #{nickname}, #{name}, #{pw}, #{levelCode});
	</insert>
	
	<!-- 회원공통정보 조회 -->
	<select id="selectUserById" parameterType="String" resultType="com.pineapple.user.service.User">
		SELECT userId, nickname, name, pw, levelCode, uDelTime
		FROM user 
		WHERE userId=#{userId}
	</select>
	
	<!-- 회원공통정보 조회(닉네임 중복체크 기능) -->
	<select id="selectUserByNickname" parameterType="String" resultType="com.pineapple.user.service.User">
		SELECT userId, nickname, name, pw, levelCode, uDelTime
		FROM user
		WHERE nickname=#{nickname}
	</select>
	
	<!-- 로그인을 위한 권한명, 직급명, 사원과 회원정보조회 -->
	<select id="getUserWithLevelnameComnameRankname"
			parameterType="String"
			resultMap="getUserWithLevelnameComnameRankname">
		SELECT u.userId, u.nickname, u.name, u.pw, u.levelCode, u.uDelTime, e.emComName, com.comOpenUserId
		, ul.userLevelName, rk.rankName
		FROM user u
		left join userlevel ul
		on u.levelCode = ul.userLevelCode
		left join employee e
		on u.userId = e.emUserId
		left join company com
		on e.emComName = com.comName
		left join rankcode rk
		on e.emRankCode = rk.rankCode
		where u.userId=#{userId}
	</select>
	<resultMap type="com.pineapple.user.service.UserAndLevelAndEmployeeAndCompanyAndRank"
			   id="getUserWithLevelnameComnameRankname">
		<result property="userId" column="userId"/>
		<result property="nickname" column="nickname"/>
		<result property="name" column="name"/>
		<result property="pw" column="pw"/>
		<result property="levelCode" column="levelCode"/>
		<result property="uDelTime" column="uDelTime"/>
		<collection property="employee"
					ofType="com.pineapple.user.service.Employee">
			<result property="emUserId" column="emUserId"/>
			<result property="emComName" column="emComName"/>
			<result property="emRankCode" column="emRankCode"/>
		</collection>
		<collection property="company"
					ofType="com.pineapple.user.service.Company">
			<result property="comName" column="comName"/>
			<result property="comOpenUserId" column="comOpenUserId"/>
		</collection>
		<collection property="userlevel"
					ofType="com.pineapple.user.service.UserLevel">
			<result property="userLevelCode" column="userLevelCode"/>
			<result property="userLevelName" column="userLevelName"/>
		</collection>
		<collection property="rankcode"
					ofType="com.pineapple.user.service.RankCode">
			<result property="rankCode" column="rankCode"/>
			<result property="rankName" column="rankName"/>
		</collection>
	</resultMap>
	
	<!-- 세션에 저장된 id를 입력값으로 하여 비밀번호 변경 -->
	<update id="updatePwById" parameterMap="updatePwById">
		UPDATE user
		SET
			pw=#{pw}
		WHERE userId=#{userId}
	</update>
	<parameterMap id="updatePwById" type="java.util.Map">
		<parameter property="pw"/>
    	<parameter property="userId"/> 
    </parameterMap>

	<!--  
	<update id="updateUserById" parameterType="User">
		UPDATE user
		SET
			userId=#{userId},
			nickname=#{nickname},
			name=#{name},
			pw=#{pw},
			levelCode=#{levelCode},
			uDelTime=NOW()
		WHERE userId=#{userId}
	</update>
	
	<select id="selectAllUser">
		SELECT * 
		FROM user
	</select>
	
	<delete id="deleteUserById" parameterType="String">
		DELETE
		FROM user 
		WHERE userId='#{userId}'
	</delete>
	-->

	<!-- 회원상세정보 입력/수정/조회 -->
	<insert id="insertUserDetail" parameterType="com.pineapple.user.service.UserDetail">
		INSERT INTO userdetail
				(userDetailId, phoneFront3, phoneRest8, postalCode, address, address2, nameCheck)
		VALUES  (#{userDetailId}, #{phoneFront3}, #{phoneRest8}, #{postalCode}, #{address}, #{address2}, #{nameCheck})
	</insert>
	 
	<update id="updateUserDetailById" parameterType="String">
		UPDATE userdetail
 		SET
 			userDetailId=#{userDetailId},
  			phoneFront3=#{phoneFront3},
  			phoneRest8=#{phoneRest8},
  			postalCode=#{postalCode},
  			address=#{address},
  			address2=#{address2},
  			nameCheck=#{nameCheck}
 		WHERE userDetailId=#{userDetailId}
	</update>
	
	<select id="selectUserDetailById" parameterType="String" resultType="com.pineapple.user.service.UserDetail">
		SELECT userDetailId, phoneFront3, phoneRest8, postalCode, address, address2, nameCheck
		FROM userdetail 
		WHERE userDetailId=#{userDetailId}
	</select>
	
	<!-- 계좌정보 입력 -->
	<insert id="insertAccount" parameterType="com.pineapple.user.service.Account">
		INSERT INTO account
			(accountId, secCompany, accountNumber, accountNickname)
		VALUES (#{accountId}, #{secCompany}, #{accountNumber}, #{accountNickname})
	</insert>
	<!-- 계좌정보 조회 -->
	<select id="selectAccountByAccountCode" parameterType="int" resultMap="selectAccountByAccountCode">
		SELECT accountCode, accountId, secCompany, accountNumber, accountNickname
 		FROM account 
 		WHERE accountCode=#{accountCode}
	</select>
	<resultMap type="com.pineapple.user.service.Account" id="selectAccountByAccountCode">
		<result property="accountCode" column="accountCode"/>
		<result property="accountId" column="accountId"/>
		<result property="secCompany" column="secCompany"/>
		<result property="accountNumber" column="accountNumber"/>
		<result property="accountNickname" column="accountNickname"/>
	</resultMap>
	<!-- 계좌정보 수정 -->
	<update id="updateAccountByAccountCode" parameterType="com.pineapple.user.service.Account">
		UPDATE account
		SET
		accountCode=#{accountCode},
		accountId=#{accountId},
		secCompany=#{secCompany},
		accountNumber=#{accountNumber},
		accountNickname=#{accountNickname}
		WHERE accountCode=#{accountCode}
	</update>
	<!-- 계좌정보 삭제 -->
	<delete id="deleteAccountByAccountCode" parameterType="int">
		DELETE
		FROM account 
		WHERE accountCode=#{accountCode}
	</delete>
	
</mapper>